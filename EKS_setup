Create an IAM User with Admin Permissions
----------------------------------------
Navigate to IAM > Users.
Click Add users.
In the User name field, enter k8-admin.
Click Next.
Select Attach policies directly.
Select AdministratorAccess.
Click Next.
Click Create user.
Select the newly created user k8-admin.
Select the Security credentials tab.
Scroll down to Access keys and select Create access key.
Select Command Line Interface (CLI) and checkmark the acknowledgment at the bottom of the page.
Click Next.
Click Create access key.
Either copy both the access key and the secret access key and paste them into a local text file, or click Download .csv file. We will use the credentials when setting up the AWS CLI.
Click Done.

Launch an EC2 Instance and Configure the Command Line Tools:
-----------------------------------------------------------
Navigate to EC2 > Instances.

Click Launch Instance.

At the Amazon Machine Image (AMI) dropdown, select the Amazon Linux 2 AMI.

Leave t2.micro selected under Instance type.

In the Key pair (login) box, select Create new key pair.

Give it a Key pair name of mynvkp.

Click Create new key pair. This will download the key pair for later use.

Expand Network settings and click on Edit.

In the Network settings box:

Network: Leave as default.
Subnet: Leave as default.
Auto-assign Public IP: Select Enable.
Click Launch instance.

Click on the instance ID link (which looks like i-xxxxxxxxx), and give the new instance a few minutes to enter the running state.

Once the instance is fully created, check the checkbox next to it and click Connect at the top of the window.

In the Connect to your instance dialog, select EC2 Instance Connect (browser-based SSH connection).

Click Connect.

In the command line window, check the AWS CLI version:

aws --version
It should be an older version.

Download v2:

curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
Unzip the file:

unzip awscliv2.zip
See where the current AWS CLI is installed:

which aws
It should be /usr/bin/aws.

Update it:

sudo ./aws/install --bin-dir /usr/bin --install-dir /usr/bin/aws-cli --update
Check the version of AWS CLI:

aws --version
It should now be updated.

Configure the CLI:

aws configure
For AWS Access Key ID, paste in the access key ID you copied earlier.

For AWS Secret Access Key, paste in the secret access key you copied earlier.

For Default region name, enter us-east-1.

For Default output format, enter json.

Download kubectl:

curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.16.8/2020-04-16/bin/linux/amd64/kubectl
Apply execute permissions to the binary:

chmod +x ./kubectl
Copy the binary to a directory in your path:

mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
Ensure kubectl is installed:

kubectl version --short --client
Download eksctl:

curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
Move the extracted binary to /usr/bin:

sudo mv /tmp/eksctl /usr/bin
Get the version of eksctl:

eksctl version
See the options with eksctl:

eksctl help

Now create the eks cluster:
---------------------------

1) Provision an EKS cluster with three worker nodes in us-east-1

eksctl create cluster --name dev --region us-east-1 --nodegroup-name standard-workers --node-type t3.medium --nodes-min 1 --nodes-max 4 --managed

Note: Explore the eks cluster in AWS console. It will create the control plane, worker nodes, VPC, security groups etc.,

2) In the CLI, check the cluster:

eksctl get cluster

3) Enable it to connect to our cluster:

aws eks update-kubeconfig --name dev --region us-east-1

root@ip-10-0-0-252:~# aws eks update-kubeconfig --name dev --region us-east-1
Added new context arn:aws:eks:us-east-1:763145605469:cluster/dev to /root/.kube/config
root@ip-10-0-0-252:~# 

Create a deployment on eks cluster



